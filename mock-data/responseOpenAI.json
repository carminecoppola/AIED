{
    "exercises": [
        {
            "name": "Sum of Two Numbers",
            "difficulty": "Beginner",
            "description": "Write a function that takes two numbers as input and returns their sum.",
            "code": "def add_numbers(a, b):\n    return a + b",
            "tests": [
                {
                    "input": [
                        2,
                        3
                    ],
                    "output": 5
                },
                {
                    "input": [
                        -1,
                        1
                    ],
                    "output": 0
                },
                {
                    "input": [
                        10,
                        20
                    ],
                    "output": 30
                }
            ]
        },
        {
            "name": "Reverse a String",
            "difficulty": "Beginner",
            "description": "Write a function that reverses a given string.",
            "code": "def reverse_string(s):\n    return s[::-1]",
            "tests": [
                {
                    "input": [
                        "hello"
                    ],
                    "output": "olleh"
                },
                {
                    "input": [
                        "Python"
                    ],
                    "output": "nohtyP"
                },
                {
                    "input": [
                        "racecar"
                    ],
                    "output": "racecar"
                }
            ]
        },
        {
            "name": "Factorial",
            "difficulty": "Intermediate",
            "description": "Compute the factorial of a given number.",
            "code": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)",
            "tests": [
                {
                    "input": [
                        5
                    ],
                    "output": 120
                },
                {
                    "input": [
                        0
                    ],
                    "output": 1
                },
                {
                    "input": [
                        3
                    ],
                    "output": 6
                }
            ]
        },
        {
            "name": "Check Prime Number",
            "difficulty": "Intermediate",
            "description": "Write a function to check if a number is prime.",
            "code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
            "tests": [
                {
                    "input": [
                        7
                    ],
                    "output": true
                },
                {
                    "input": [
                        10
                    ],
                    "output": false
                },
                {
                    "input": [
                        2
                    ],
                    "output": true
                }
            ]
        },
        {
            "name": "Fibonacci Sequence",
            "difficulty": "Intermediate",
            "description": "Generate the first N numbers in the Fibonacci sequence.",
            "code": "def fibonacci(n):\n    fib = [0, 1]\n    for _ in range(n - 2):\n        fib.append(fib[-1] + fib[-2])\n    return fib[:n]",
            "tests": [
                {
                    "input": [
                        5
                    ],
                    "output": [
                        0,
                        1,
                        1,
                        2,
                        3
                    ]
                },
                {
                    "input": [
                        1
                    ],
                    "output": [
                        0
                    ]
                },
                {
                    "input": [
                        7
                    ],
                    "output": [
                        0,
                        1,
                        1,
                        2,
                        3,
                        5,
                        8
                    ]
                }
            ]
        },
        {
            "name": "Find Largest Element",
            "difficulty": "Intermediate",
            "description": "Find the largest element in a given list.",
            "code": "def find_largest(lst):\n    return max(lst)",
            "tests": [
                {
                    "input": [
                        [
                            1,
                            5,
                            3,
                            9,
                            2
                        ]
                    ],
                    "output": 9
                },
                {
                    "input": [
                        [
                            -10,
                            -20,
                            -3
                        ]
                    ],
                    "output": -3
                },
                {
                    "input": [
                        [
                            100,
                            50,
                            200
                        ]
                    ],
                    "output": 200
                }
            ]
        },
        {
            "name": "Anagram Check",
            "difficulty": "Advanced",
            "description": "Check if two strings are anagrams.",
            "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)",
            "tests": [
                {
                    "input": [
                        "listen",
                        "silent"
                    ],
                    "output": true
                },
                {
                    "input": [
                        "hello",
                        "world"
                    ],
                    "output": false
                },
                {
                    "input": [
                        "evil",
                        "vile"
                    ],
                    "output": true
                }
            ]
        },
        {
            "name": "Matrix Transpose",
            "difficulty": "Advanced",
            "description": "Transpose a given matrix.",
            "code": "def transpose(matrix):\n    return [list(row) for row in zip(*matrix)]",
            "tests": [
                {
                    "input": [
                        [
                            [
                                1,
                                2
                            ],
                            [
                                3,
                                4
                            ]
                        ]
                    ],
                    "output": [
                        [
                            1,
                            3
                        ],
                        [
                            2,
                            4
                        ]
                    ]
                },
                {
                    "input": [
                        [
                            [
                                1,
                                2,
                                3
                            ],
                            [
                                4,
                                5,
                                6
                            ]
                        ]
                    ],
                    "output": [
                        [
                            1,
                            4
                        ],
                        [
                            2,
                            5
                        ],
                        [
                            3,
                            6
                        ]
                    ]
                }
            ]
        },
        {
            "name": "Balanced Parentheses",
            "difficulty": "Hard",
            "description": "Check if a given string of parentheses is balanced.",
            "code": "def is_balanced(s):\n    stack = []\n    pairs = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or stack.pop() != pairs[char]:\n                return False\n    return not stack",
            "tests": [
                {
                    "input": [
                        "()"
                    ],
                    "output": true
                },
                {
                    "input": [
                        "(]"
                    ],
                    "output": false
                },
                {
                    "input": [
                        "{[()]}"
                    ],
                    "output": true
                }
            ]
        },
        {
            "name": "Dijkstra's Shortest Path",
            "difficulty": "Hard",
            "description": "Implement Dijkstra's algorithm for shortest path.",
            "code": "import heapq\n\ndef dijkstra(graph, start):\n    queue, distances = [(0, start)], {start: 0}\n    while queue:\n        current_distance, node = heapq.heappop(queue)\n        for neighbor, weight in graph.get(node, {}).items():\n            distance = current_distance + weight\n            if distance < distances.get(neighbor, float('inf')):\n                distances[neighbor] = distance\n                heapq.heappush(queue, (distance, neighbor))\n    return distances",
            "tests": [
                {
                    "input": [
                        {
                            "A": {
                                "B": 1,
                                "C": 4
                            },
                            "B": {
                                "C": 2,
                                "D": 5
                            },
                            "C": {
                                "D": 1
                            },
                            "D": {}
                        },
                        "A"
                    ],
                    "output": {
                        "A": 0,
                        "B": 1,
                        "C": 3,
                        "D": 4
                    }
                }
            ]
        }
    ]
}